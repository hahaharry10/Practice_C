#!/bin/bash

contains () {
    arr=$1
    arr_len=$2
    target=$3

    for (( i = 0; i < $arr_len; i++ )); do
        if [[ ${arr[i]} == $target ]]; then
            return 0
        fi
    done

    return 1;
}

params=("$@")
if contains $params $# "-h"; then
    echo "Usage: ./build [-clean-asm] [-clean] file_basename"
    echo -e "\t-clean-asm: Remove all assembly files."
    echo -e "\t-clean: Remove all assmbly and executable files."
    exit 0
fi

executables=("standardWay" "inlineWay" "incorrectWay")
execut_num=3

compileOnly=0
assemblyOnly=0
compileNeeded=1

for ((i = 0; i < $#; i++ )); do
    case ${params[i]} in 
        -clean)
            for (( j = 0; j < 3; j++ )); do
                rm "${executables[j]}.o" "${executables[j]}.asm"
            done
            rm main main.asm
            exit 0
            ;;
        -clean-asm)
            for (( i = 0; i < 3; i++ )); do
                rm "${executables[i]}.asm"
            done
            rm main.asm
            exit 0
            ;;
        *)
            if [[ ${params[i]:0:1} == "-" ]]; then
                echo "ERROR: Invalid flag (${params[i]})"
                exit 1
            fi
            ;;
    esac
done

if [ $# -ne 0 ] && contains $executables $execut_num "${params[$(($# - 1))]}"; then
    executables=("${params[$(($# - 1))]}")
    execut_num=1
fi

obj_files=""
for (( i = 0; i < $execut_num; i++ )); do
    flags="-std=c89 -Wall -Wextra -pedantic"
    echo "clang $flags -c -o ${executables[i]}.o ${executables[i]}.c"
    clang $flags -c -o "${executables[i]}.o" "${executables[i]}.c"
    echo "llvm-objdump -d -h "${executables[i]}.o" > ${executables[i]}.asm"
    llvm-objdump -d -h "${executables[i]}.o" > "${executables[i]}.asm"
done

for (( i = 0; i < $execut_num; i++ )); do
    obj_files="$obj_files ${executables[i]}.o"
done

echo "clang $flags -o main $obj_files"
clang $flags -o main main.c $obj_files
echo "llvm-objdump -d -h main > main.asm"
llvm-objdump -d -h main > main.asm

exit 0
